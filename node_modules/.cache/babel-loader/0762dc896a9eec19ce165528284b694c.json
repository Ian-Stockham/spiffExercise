{"ast":null,"code":"var _jsxFileName = \"/Users/ianstockham/Documents/spiff_react_exercises/src/progress_bar_exercise/pbeSolution.js\";\n\n/* \nIan Stockham\nMost recent edit date: 06/29/21 \nMost recent editor: Ian Stockham\n*/\nimport React, { useState, useRef } from 'react';\nimport \"./progressBarStyle.css\";\n/*  The majority of the code below was pulled from two main sources and combined for the sake of functionality.\n    The outlying structure of the code was provided by Florin Pop on youtube\n\tLink to youtube: https://www.youtube.com/watch?v=AbRgaY0khPM&ab_channel=FlorinPop\n\tLink to codepen: https://codepen.io/FlorinPop17/pen/jOEpvGb\n\n    While the timing functionality was pulled primarily from Abdul Basit's article on Dev Community about the \n    construction of a stopwatch using react.\n    Link to dev.to:  https://dev.to/abdulbasit313/how-to-develop-a-stopwatch-in-react-js-with-custom-hook-561b\n*/\n// the following funciton defines the progress bar itself and how it is displayed\n\nconst Progress = ({\n  done\n}) => {\n  const [style, setStyle] = React.useState({}); // here we return said progress bar and associated values\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-done\",\n    style: {\n      opacity: 1,\n      width: `${done}%`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 4\n    }\n  }, done, \"%\"));\n};\n/* within the App funciton we define a numeber of items using states to determine their ability to funciton alongside\none another */\n\n\nconst App = () => {\n  // defining a timer as well as whether or not the counter in quesiton is actively counting or not\n  const [timer, setTimer] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const countRef = useRef(null);\n  const [finish, setFinish] = useState(false);\n\n  const handleStart = () => {\n    // start button logic here\n    setIsActive(true);\n    setIsPaused(true);\n    countRef.current = setInterval(() => {\n      setTimer(timer => timer + 1);\n    }, 1000);\n  };\n\n  const handlePause = () => {\n    // Pause button logic here\n    clearInterval(countRef.current);\n    setIsPaused(false);\n  };\n\n  const handleResume = () => {\n    // Resume button logic here\n    setIsPaused(true);\n    countRef.current = setInterval(() => {\n      setTimer(timer => timer + 1);\n    }, 1000);\n  };\n\n  const handleFinish = () => {\n    //Finish button logic here\n    setFinish(true);\n  };\n\n  const handleReset = () => {\n    // Reset button logic here\n    clearInterval(countRef.current);\n    setIsActive(false);\n    setIsPaused(false);\n    setTimer(0);\n    setFinish(false);\n  };\n  /*  this function returns the percentage value desired within the progress bar displayed such that\n      the Progress item need not be redrawn over and over which would look messy */\n\n\n  const percentVal = () => {\n    // for the first 15 seconds the bar will increase as a percentage of the first 90% completion\n    if (timer <= 15 && finish === false) {\n      return timer / 15 * 90;\n    } // if the finish button is pressed the function will return 100 percent completion\n    else if (finish === true) {\n        return 100;\n      } // if it has been loading for over 15 seconds and finish has yet to be selected 90% completion is displayed\n      else {\n          return 90;\n        }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, \"React Progress Bar\"), /*#__PURE__*/React.createElement(Progress, {\n    done: percentVal(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, // if not yet started then display the start button\n  !isActive && !isPaused ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleStart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, \"Start\") : // otherwise if paused show the resume button and if resumed show the pause button\n  isPaused ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handlePause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 32\n    }\n  }, \"Pause\") : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleResume,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }, \"Resume\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleFinish,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, \"Finish\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleReset,\n    disabled: !isActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, \"Reset\")));\n}; // exporting for further use within ProgressBarExercise.js\n\n\nexport default App;","map":{"version":3,"sources":["/Users/ianstockham/Documents/spiff_react_exercises/src/progress_bar_exercise/pbeSolution.js"],"names":["React","useState","useRef","Progress","done","style","setStyle","opacity","width","App","timer","setTimer","isActive","setIsActive","isPaused","setIsPaused","countRef","finish","setFinish","handleStart","current","setInterval","handlePause","clearInterval","handleResume","handleFinish","handleReset","percentVal"],"mappings":"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","sourcesContent":["/* \nIan Stockham\nMost recent edit date: 06/29/21 \nMost recent editor: Ian Stockham\n*/\n\nimport React, { useState, useRef } from 'react';\nimport \"./progressBarStyle.css\" \n\n/*  The majority of the code below was pulled from two main sources and combined for the sake of functionality.\n    The outlying structure of the code was provided by Florin Pop on youtube\n\tLink to youtube: https://www.youtube.com/watch?v=AbRgaY0khPM&ab_channel=FlorinPop\n\tLink to codepen: https://codepen.io/FlorinPop17/pen/jOEpvGb\n\n    While the timing functionality was pulled primarily from Abdul Basit's article on Dev Community about the \n    construction of a stopwatch using react.\n    Link to dev.to:  https://dev.to/abdulbasit313/how-to-develop-a-stopwatch-in-react-js-with-custom-hook-561b\n*/\n\n// the following funciton defines the progress bar itself and how it is displayed\nconst Progress = ({done}) => {\n\tconst [style, setStyle] = React.useState({});\n\t\n    // here we return said progress bar and associated values\n\treturn (\n\t\t<div className=\"progress\">\n\t\t\t<div className=\"progress-done\" style={{\n                opacity: 1,\n                width: `${done}%`}}>\n\t\t\t\t{done}%\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\n/* within the App funciton we define a numeber of items using states to determine their ability to funciton alongside\none another */\nconst App = () => {\n    // defining a timer as well as whether or not the counter in quesiton is actively counting or not\n    const [timer, setTimer] = useState(0)\n    const [isActive, setIsActive] = useState(false)\n    const [isPaused, setIsPaused] = useState(false)\n    const countRef = useRef(null)\n    const [finish, setFinish] = useState(false)\n\n    const handleStart = () => {\n        // start button logic here\n        setIsActive(true)\n        setIsPaused(true)\n        countRef.current = setInterval(() => {\n            setTimer((timer) => timer + 1)\n        }, 1000)\n    }\n\n    const handlePause = () => {\n        // Pause button logic here\n        clearInterval(countRef.current)\n        setIsPaused(false)\n\n    }\n\n    const handleResume = () => {\n        // Resume button logic here\n        setIsPaused(true)\n        countRef.current = setInterval(() => {\n            setTimer((timer) => timer + 1)\n        }, 1000)\n    }\n\n    const handleFinish = () => {\n        //Finish button logic here\n        setFinish(true)\n    }\n\n    const handleReset = () => {\n        // Reset button logic here\n        clearInterval(countRef.current)\n        setIsActive(false)\n        setIsPaused(false)\n        setTimer(0)\n        setFinish(false)\n    }\n\n    /*  this function returns the percentage value desired within the progress bar displayed such that\n        the Progress item need not be redrawn over and over which would look messy */\n    const percentVal = () => {\n        // for the first 15 seconds the bar will increase as a percentage of the first 90% completion\n        if (timer <= 15 && finish === false) {\n            return (timer/15)*90\n        }\n        // if the finish button is pressed the function will return 100 percent completion\n        else if (finish === true) {\n            return (100)\n        }\n        // if it has been loading for over 15 seconds and finish has yet to be selected 90% completion is displayed\n        else {\n            return (90)\n        }\n    }\n\n    return(\n\t<>\n        {/* initial header is returned here */}\n        <h1>React Progress Bar</h1>\n        {/* progress bar is created with the percentage value function defined above */}\n        <Progress done = {percentVal()}/>\n        {/* buttons are defined - i would've loved to keep working on the aesthetics of these */}\n        <div className='buttons'>\n            {/* below is the logic defining the display of buttons which are available to the user at \n            any given point during the programs execution */}\n            {\n                // if not yet started then display the start button\n                !isActive && !isPaused ?\n                <button onClick={handleStart}>Start</button>\n                : (\n                // otherwise if paused show the resume button and if resumed show the pause button\n                    isPaused ? <button onClick={handlePause}>Pause</button> :\n                    <button onClick={handleResume}>Resume</button>\n                )\n            }\n            {/* finally always display the finish and reset buttons */}\n            <button onClick={handleFinish}>Finish</button>\n            <button onClick={handleReset} disabled={!isActive}>Reset</button>\n        </div>\n\t</>\n\n    );\n\n}\n\n// exporting for further use within ProgressBarExercise.js\n\nexport default App"]},"metadata":{},"sourceType":"module"}